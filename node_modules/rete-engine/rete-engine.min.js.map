{"version":3,"file":"rete-engine.min.js","sources":["src/control-flow.ts","src/control-flow-engine.ts","src/dataflow.ts","src/utils/cache.ts","src/utils/cancellable.ts","src/dataflow-engine.ts"],"sourcesContent":["import { NodeEditor, NodeId } from 'rete'\n\nimport { ClassicScheme } from './types'\n\n/**\n * ControlFlowNodeSetup is a set of functions that define how to execute a node.\n */\nexport type ControlFlowNodeSetup<T extends ClassicScheme['Node'], I extends (keyof T['inputs'])[] = string[], O extends (keyof T['outputs'])[] = string[]> = {\n  /** Specifies the inputs which are part of the control flow */\n  inputs: () => I\n  /** Specifies the outputs which are part of the control flow */\n  outputs: () => O\n  /** Called when the node received control from the previous node */\n  execute(input: I[number], forward: (output: O[number]) => any): any\n}\n\n/**\n * ControlFlow is a class that allows to execute nodes in a graph using Control flow approach.\n * @priority 7\n */\nexport class ControlFlow<Schemes extends ClassicScheme> {\n  setups = new Map<NodeId, ControlFlowNodeSetup<any, any, any>>()\n\n  /**\n   * @param editor NodeEditor instance\n   */\n  constructor(private editor: NodeEditor<Schemes>) { }\n\n  /**\n   * Adds the node to the control flow.\n   * @param node Node instance\n   * @param setup Set of functions that define how to execute the node\n   */\n  public add<T extends Schemes['Node']>(node: T, setup: ControlFlowNodeSetup<T, (keyof T['inputs'])[], (keyof T['outputs'])[]>) {\n    const affected = this.setups.get(node.id)\n\n    if (affected) {\n      throw new Error('already processed')\n    }\n    this.setups.set(node.id, setup)\n  }\n\n  /**\n   * Removes the node from the control flow.\n   * @param nodeId Node id\n   */\n  public remove(nodeId: NodeId) {\n    this.setups.delete(nodeId)\n  }\n\n  /**\n   * Execute the node and its successors (in case `forward` is called for some output).\n   * @param nodeId Node id\n   * @param input Input key that will be considered as the initiator of the execution\n   */\n  public execute(nodeId: NodeId, input?: string) {\n    const setup = this.setups.get(nodeId)\n\n    if (!setup) throw new Error('node is not initialized')\n    const inputKeys = setup.inputs()\n\n    if (input && !inputKeys.includes(input)) throw new Error('inputs don\\'t have a key')\n\n    setup.execute(input, output => {\n      const outputKeys = setup.outputs()\n\n      if (!outputKeys.includes(output)) throw new Error('outputs don\\'t have a key')\n\n      const cons = this.editor.getConnections().filter(c => {\n        return c.source === nodeId && c.sourceOutput === output\n      })\n\n      cons.forEach(con => {\n        this.execute(con.target, con.targetInput)\n      })\n    })\n  }\n}\n","import { GetSchemes, NodeEditor, NodeId, Root, Scope } from 'rete'\n\nimport { ControlFlow } from './control-flow'\nimport { ClassicScheme } from './types'\n\nexport type ControlFlowEngineScheme = GetSchemes<\n  ClassicScheme['Node'] & { execute(input: string, forward: (output: string) => void): void },\n  ClassicScheme['Connection']\n>\n\ntype Configure<Schemes extends ControlFlowEngineScheme> = (node: Schemes['Node']) => ({\n  inputs: () => string[]\n  outputs: () => string[]\n})\n\n/**\n * ControlFlowEngine is a plugin that integrates ControlFlow with NodeEditor making it easy to use\n * @priority 9\n * @listens nodecreated\n * @listens noderemoved\n */\nexport class ControlFlowEngine<Schemes extends ControlFlowEngineScheme> extends Scope<never, [Root<Schemes>]> {\n  editor!: NodeEditor<Schemes>\n  controlflow!: ControlFlow<Schemes>\n\n  /**\n   * @param configure Allows to specify which inputs and outputs are part of the control flow\n   */\n  constructor(private configure?: Configure<Schemes>) {\n    super('control-flow-engine')\n\n    this.addPipe(context => {\n      if (context.type === 'nodecreated') {\n        this.add(context.data)\n      }\n      if (context.type === 'noderemoved') {\n        this.remove(context.data)\n      }\n      return context\n    })\n  }\n\n  setParent(scope: Scope<Root<Schemes>>): void {\n    super.setParent(scope)\n\n    this.editor = this.parentScope<NodeEditor<Schemes>>(NodeEditor)\n    this.controlflow = new ControlFlow(this.editor)\n  }\n\n  private add(node: Schemes['Node']) {\n    const options = this.configure\n      ? this.configure(node)\n      : { inputs: () => Object.keys(node.inputs), outputs: () => Object.keys(node.outputs) }\n\n    this.controlflow.add(node, {\n      inputs: options.inputs,\n      outputs: options.outputs,\n      execute: (input, forward) => {\n        node.execute(String(input), forward)\n      }\n    })\n  }\n\n  private remove(node: Schemes['Node']) {\n    this.controlflow.remove(node.id)\n  }\n\n  /**\n   * Trigger execution starting from the specified node.\n   * @param nodeId Node id\n   * @param input Input key that will be considered as the initiator of the execution\n   */\n  public execute(nodeId: NodeId, input?: string) {\n    this.controlflow.execute(nodeId, input)\n  }\n}\n","import { NodeEditor, NodeId } from 'rete'\n\nimport { ClassicScheme } from './types'\n\n/**\n * DataflowNodeSetup is a set of functions that define how to process a node.\n */\nexport type DataflowNodeSetup<\n  T extends ClassicScheme['Node'],\n  I extends { [key in keyof T['inputs']]: any },\n  O extends { [key in keyof T['outputs']]: any }\n> = {\n  inputs: () => (keyof I)[]\n  outputs: () => (keyof O)[]\n  data(fetchInputs: () => Promise<Partial<{ [key in keyof I]: I[key][] }>>): Promise<O> | O\n}\n\ntype DefaultInputs = null\ntype Inputs = Partial<Record<string, any[]>> | DefaultInputs\ntype FetchInputs<T> = T extends DefaultInputs ? Record<string, any> : Partial<T>\n\n/**\n * Dataflow is a class that allows to process nodes in a graph using Dataflow approach.\n * @priority 8\n */\nexport class Dataflow<Schemes extends ClassicScheme> {\n  setups = new Map<NodeId, DataflowNodeSetup<any, any, any>>()\n\n  /**\n   * @param editor NodeEditor instance\n   */\n  constructor(private editor: NodeEditor<Schemes>) { }\n\n  /**\n   * Adds the node to the dataflow.\n   * @param node Node instance\n   * @param setup Set of functions that define how to process the node\n   */\n  public add<T extends Schemes['Node']>(node: T, setup: DataflowNodeSetup<T, any, any>) {\n    const affected = this.setups.get(node.id)\n\n    if (affected) {\n      throw new Error('already processed')\n    }\n    this.setups.set(node.id, setup)\n  }\n\n  /**\n   * Removes the node from the dataflow.\n   * @param nodeId Node id\n   */\n  public remove(nodeId: NodeId) {\n    this.setups.delete(nodeId)\n  }\n\n  /**\n   * Fetches inputs of the node.\n   * Unlike `fetch` method, this method doesn't call `data` function of the specified node (but does call `data` for predecessor nodes recursively).\n   * @param nodeId Node id\n   * @returns Object with inputs\n   */\n  public async fetchInputs<T extends Inputs = DefaultInputs>(nodeId: NodeId): Promise<FetchInputs<T>> {\n    const result = this.setups.get(nodeId)\n\n    if (!result) throw new Error('node is not initialized')\n\n    const inputKeys = result.inputs()\n\n    const cons = this.editor.getConnections().filter(c => {\n      return c.target === nodeId && inputKeys.includes(c.targetInput)\n    })\n\n    const inputs = {} as FetchInputs<T>\n    const consWithSourceData = await Promise.all(cons.map(async c => {\n      return {\n        c,\n        sourceData: await this.fetch(c.source)\n      }\n    }))\n\n    for (const { c, sourceData } of consWithSourceData) {\n      const previous = (inputs[c.targetInput]\n        ? inputs[c.targetInput]\n        : [])!\n      const inputsMutation = inputs as Record<string, any[]>\n\n      inputsMutation[c.targetInput] = [...previous, sourceData[c.sourceOutput]]\n    }\n\n    return inputs\n  }\n\n  /**\n   * Fetches outputs of the node.\n   * This method recursively calls `data` function of the predecessor nodes until receives all of the required inputs and calls `data` function of the specified node.\n   * @param nodeId Node id\n   * @returns Object with outputs\n   */\n  public async fetch<T extends Record<string, any>>(nodeId: NodeId): Promise<T> {\n    const result = this.setups.get(nodeId)\n\n    if (!result) throw new Error('node is not initialized')\n\n    const outputKeys = result.outputs()\n    const data = await result.data(() => this.fetchInputs(nodeId))\n\n    const returningKeys = Object.keys(data) as (string | number | symbol)[]\n\n    if (!outputKeys.every(key => returningKeys.includes(key))) {\n      throw new Error(`dataflow node \"${nodeId}\" doesn't return all of required properties. Expected \"${outputKeys.join('\", \"')}\". Got \"${returningKeys.join('\", \"')}\"`)\n    }\n\n    return data\n  }\n}\n","export class Cache<Key, T> {\n  cache = new Map<Key, T>()\n\n  constructor(private onDelete?: (item?: T) => void) {}\n\n  get(key: Key) {\n    return this.cache.get(key)\n  }\n\n  add(key: Key, data: T) {\n    if (this.cache.has(key)) throw new Error('cache already exists')\n\n    this.cache.set(key, data)\n  }\n\n  patch(key: Key, data: T) {\n    this.cache.set(key, data)\n  }\n\n  delete(key: Key) {\n    const item = this.cache.get(key)\n\n    this.cache.delete(key)\n    if (this.onDelete) {\n      this.onDelete(item)\n    }\n  }\n\n  clear() {\n    Array.from(this.cache.keys()).forEach(item => {\n      this.delete(item)\n    })\n  }\n}\n","/**\n * Cancelled exception. Thrown when `reset` is called while fetching data.\n */\nexport class Cancelled extends Error {\n  constructor() {\n    super('cancelled')\n  }\n}\n\nexport type Cancellable<T> = Promise<T> & { cancel?: () => void }\ntype S<A, B> = (data: A) => B | PromiseLike<B>\n\nfunction createCancellblePromise<A, B>(...sequence: [S<void, A>, S<A, B>]): Cancellable<B>\nfunction createCancellblePromise<A, B, C>(...sequence: [S<void, A>, S<A, B>, S<B, C>]): Cancellable<C>\nfunction createCancellblePromise(...sequence: S<any, any>[]): Cancellable<any> {\n  let cancelled = false\n\n  function commit<R>(value: R): R {\n    if (cancelled) {\n      throw new Cancelled()\n    }\n    return value\n  }\n\n  // eslint-disable-next-line init-declarations\n  let reject: (reason?: any) => void\n\n  const promise: Cancellable<void> = new Promise<void>((res, rej) => {\n    reject = rej\n    res()\n  })\n\n  const n = sequence.reduce((p, item) => {\n    const t = p.then(item as any).then(commit)\n\n    return t\n  }, promise) as Cancellable<any>\n\n  n.cancel = () => {\n    if (!cancelled) reject(new Cancelled())\n    cancelled = true\n  }\n\n  return n\n}\n\nexport {\n  createCancellblePromise\n}\n","import { GetSchemes, NodeEditor, NodeId, Root, Scope } from 'rete'\n\nimport { Dataflow } from './dataflow'\nimport { ClassicScheme } from './types'\nimport { Cache } from './utils/cache'\nimport { Cancellable, createCancellblePromise } from './utils/cancellable'\n\nexport type DataflowNode = { data(inputs: Record<string, any>): Promise<Record<string, any>> | Record<string, any> }\ntype Node = ClassicScheme['Node'] & DataflowNode\nexport type DataflowEngineScheme = GetSchemes<\n  Node,\n  ClassicScheme['Connection']\n>\n\ntype Configure<Schemes extends DataflowEngineScheme> = (node: Schemes['Node']) => ({\n  inputs: () => string[]\n  outputs: () => string[]\n})\n\n/**\n * DataflowEngine is a plugin that integrates Dataflow with NodeEditor making it easy to use.\n * Additionally, it provides a cache for the data of each node in order to avoid recurring calculations.\n * @priority 10\n * @listens nodecreated\n * @listens noderemoved\n */\nexport class DataflowEngine<Schemes extends DataflowEngineScheme> extends Scope<never, [Root<Schemes>]> {\n  editor!: NodeEditor<Schemes>\n  dataflow?: Dataflow<Schemes>\n  cache = new Cache<NodeId, Cancellable<Record<string, any>>>(data => data?.cancel && data.cancel())\n\n  constructor(private configure?: Configure<Schemes>) {\n    super('dataflow-engine')\n\n    this.addPipe(context => {\n      if (context.type === 'nodecreated') {\n        this.add(context.data)\n      }\n      if (context.type === 'noderemoved') {\n        this.remove(context.data)\n      }\n      return context\n    })\n  }\n\n  setParent(scope: Scope<Root<Schemes>>): void {\n    super.setParent(scope)\n\n    this.editor = this.parentScope<NodeEditor<Schemes>>(NodeEditor)\n    this.dataflow = new Dataflow(this.editor)\n  }\n\n  private getDataflow() {\n    if (!this.dataflow) throw new Error(`DataflowEngine isn't attached to NodeEditor`)\n    return this.dataflow\n  }\n\n  private add(node: Schemes['Node']) {\n    const options = this.configure\n      ? this.configure(node)\n      : { inputs: () => Object.keys(node.inputs), outputs: () => Object.keys(node.outputs) }\n\n    this.getDataflow().add(node, {\n      inputs: options.inputs,\n      outputs: options.outputs,\n      data: async fetchInputs => {\n        const cache = this.cache.get(node.id)\n\n        if (cache) return cache\n\n        const cancellable = createCancellblePromise(\n          () => fetchInputs(),\n          inputs => node.data(inputs)\n        )\n\n        this.cache.add(node.id, cancellable)\n\n        return cancellable\n      }\n    })\n  }\n\n  private remove(node: Schemes['Node']) {\n    this.getDataflow().remove(node.id)\n  }\n\n  /**\n   * Resets the cache of the node and all its predecessors.\n   * @param nodeId Node id to reset. If not specified, all nodes will be reset.\n   */\n  public reset(nodeId?: NodeId) {\n    if (nodeId) {\n      const setup = this.getDataflow().setups.get(nodeId)\n\n      if (!setup) throw new Error('setup')\n\n      const outputKeys = setup.outputs()\n\n      this.cache.delete(nodeId)\n      this.editor.getConnections()\n        .filter(c => c.source === nodeId && outputKeys.includes(c.sourceOutput))\n        .forEach(c => {\n          this.reset(c.target)\n        })\n    } else {\n      this.cache.clear()\n    }\n  }\n\n  /**\n   * Fetches input data for the node by fetching data for all its predecessors recursively.\n   * @param nodeId Node id to fetch input data for\n   * @throws `Cancelled when `reset` is called while fetching data\n   */\n  public async fetchInputs<N extends Node>(node: NodeId | N): Promise<Parameters<N['data']>[0]> {\n    const id = typeof node === 'object'\n      ? node.id\n      : node\n\n    return this.getDataflow().fetchInputs<Parameters<N['data']>[0]>(id)\n  }\n\n  /**\n   * Fetches output data of the node\n   * @param nodeId Node id to fetch data from\n   * @throws `Cancelled` when `reset` is called while fetching data\n   */\n  public async fetch<N extends Node>(node: NodeId | N): Promise<ReturnType<N['data']>> {\n    const id = typeof node === 'object'\n      ? node.id\n      : node\n\n    return this.getDataflow().fetch<ReturnType<N['data']>>(id)\n  }\n}\n"],"names":["ControlFlow","_createClass","editor","_classCallCheck","_defineProperty","this","Map","key","value","node","setup","setups","get","id","Error","set","nodeId","input","_this","inputKeys","inputs","includes","execute","output","outputs","getConnections","filter","c","source","sourceOutput","forEach","con","target","targetInput","ControlFlowEngine","_Scope","configure","_callSuper","addPipe","context","type","add","data","remove","_inherits","scope","_superPropGet","parentScope","NodeEditor","controlflow","options","Object","keys","forward","String","Scope","Dataflow","_fetchInputs","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","result","cons","consWithSourceData","_iterator","_step","_step$value","sourceData","previous","wrap","_context2","prev","next","Promise","all","map","_ref","_callee","_context","t0","fetch","t1","sent","abrupt","stop","_x2","apply","arguments","_createForOfIteratorHelper","s","n","done","concat","_toConsumableArray","err","e","f","_x","_fetch","_callee3","outputKeys","returningKeys","_this2","_context3","fetchInputs","every","join","_x3","Cache","onDelete","cache","has","item","Array","from","Cancelled","_Error","_wrapNativeSuper","createCancellblePromise","reject","cancelled","commit","promise","res","rej","_len","length","sequence","_key","reduce","p","then","cancel","DataflowEngine","dataflow","_data","getDataflow","cancellable","_this3","reset","clear","_typeof"],"mappings":"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"}