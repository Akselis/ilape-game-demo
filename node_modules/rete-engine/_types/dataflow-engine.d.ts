import { GetSchemes, NodeEditor, NodeId, Root, Scope } from 'rete';
import { Dataflow } from './dataflow';
import { ClassicScheme } from './types';
import { Cache } from './utils/cache';
import { Cancellable } from './utils/cancellable';
export type DataflowNode = {
    data(inputs: Record<string, any>): Promise<Record<string, any>> | Record<string, any>;
};
type Node = ClassicScheme['Node'] & DataflowNode;
export type DataflowEngineScheme = GetSchemes<Node, ClassicScheme['Connection']>;
type Configure<Schemes extends DataflowEngineScheme> = (node: Schemes['Node']) => ({
    inputs: () => string[];
    outputs: () => string[];
});
/**
 * DataflowEngine is a plugin that integrates Dataflow with NodeEditor making it easy to use.
 * Additionally, it provides a cache for the data of each node in order to avoid recurring calculations.
 * @priority 10
 * @listens nodecreated
 * @listens noderemoved
 */
export declare class DataflowEngine<Schemes extends DataflowEngineScheme> extends Scope<never, [Root<Schemes>]> {
    private configure?;
    editor: NodeEditor<Schemes>;
    dataflow?: Dataflow<Schemes>;
    cache: Cache<string, Cancellable<Record<string, any>>>;
    constructor(configure?: Configure<Schemes> | undefined);
    setParent(scope: Scope<Root<Schemes>>): void;
    private getDataflow;
    private add;
    private remove;
    /**
     * Resets the cache of the node and all its predecessors.
     * @param nodeId Node id to reset. If not specified, all nodes will be reset.
     */
    reset(nodeId?: NodeId): void;
    /**
     * Fetches input data for the node by fetching data for all its predecessors recursively.
     * @param nodeId Node id to fetch input data for
     * @throws `Cancelled when `reset` is called while fetching data
     */
    fetchInputs<N extends Node>(node: NodeId | N): Promise<Parameters<N['data']>[0]>;
    /**
     * Fetches output data of the node
     * @param nodeId Node id to fetch data from
     * @throws `Cancelled` when `reset` is called while fetching data
     */
    fetch<N extends Node>(node: NodeId | N): Promise<ReturnType<N['data']>>;
}
export {};
//# sourceMappingURL=dataflow-engine.d.ts.map